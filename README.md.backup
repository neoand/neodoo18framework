
# üöÄ Neodoo18Framework

> **The Ultimate Complete Odoo 18+ Development Environment**

---
> ‚ö†Ô∏è **ATTENTION:**
> To run Neodoo18Framework, you MUST have **Python 3.8+** and **PostgreSQL 12+** installed and available in your system PATH.
>
> If either is missing, the system will show an alert and will not proceed.
>
> - [How to install Python](https://www.python.org/downloads/)
> - [How to install PostgreSQL](https://www.postgresql.org/download/)
>
> *Recommended: Install both before starting the framework!*
---

**Create production-ready Odoo 18+ projects with a single command!**

## ‚ö° **QUICK START - 30 SECONDS TO ODOO**

### ÔøΩ **Linux/macOS**
```bash
# Clone and create complete Odoo project
git clone https://github.com/neoand/neodoo18framework.git
cd neodoo18framework
./neodoo create  # interactive wizard (recommended)
```

### ü™ü **Windows**
```batch
# Clone and create complete Odoo project
git clone https://github.com/neoand/neodoo18framework.git
cd neodoo18framework

# Option 1: Command Prompt/PowerShell
neodoo.bat create      # interactive wizard

# Option 2: PowerShell
.\neodoo.ps1 create    # interactive wizard

# Option 3: Direct Python (if above don't work)
python framework\cli\neodoo.py create
```

**What you get:**
- ‚úÖ Complete Odoo 18+ source code
- ‚úÖ OCA modules (web_responsive included)
- ‚úÖ Virtual environment configured
- ‚úÖ Database ready
- ‚úÖ Browser opens automatically at http://localhost:8069

## üéØ **WHAT YOU GET**

This framework creates **complete Odoo development environments**, not just modules:

```
~/odoo_projects/your_project/
‚îú‚îÄ‚îÄ üì¶ odoo_source/         # Complete Odoo 18+ source
‚îú‚îÄ‚îÄ üîß custom_addons/       # Your custom modules
‚îú‚îÄ‚îÄ üåê community_addons/    # OCA modules (web, server-tools, etc.)
‚îú‚îÄ‚îÄ üêç .venv/              # Python virtual environment
‚îú‚îÄ‚îÄ ‚öôÔ∏è  odoo.conf           # Pre-configured settings
‚îú‚îÄ‚îÄ üöÄ run.sh              # One-click startup
‚îî‚îÄ‚îÄ üìñ README.md           # Project documentation
```

## üìö **COMPLETE DOCUMENTATION**

**[üìñ Central Documentation](./docs/index.md)** - Complete framework documentation

### Choose Your Language:
- üá∫üá∏ [English Guide](./docs/guides/en/COMPLETE_GUIDE.md)
- üáßüá∑ [Guia em Portugu√™s](./docs/guides/pt/GUIA_COMPLETO.md)
- üá™üá∏ [Gu√≠a en Espa√±ol](./docs/guides/es/GUIA_COMPLETA.md)
- üß† [VSCode Agent Playbook](./docs/guides/en/VSCODE_AGENT_PLAYBOOK.md) - Use VSCode as the multi-role command center
- üß© [Validator Plugin Guide](./docs/guides/en/VALIDATOR_PLUGINS.md) - Extend the validator with custom checks
- üß≠ [Migration Guide](./docs/guides/en/MIGRATION_GUIDE.md) - Plan upgrades from 15/16/17 to 18

### Platform-Specific:
- ü™ü **[Windows Setup Guide](./WINDOWS.md)** - Complete Windows installation and usage guide

üí° **[Practical Examples](./examples/README.md)** - Real-world use cases and templates

## üõ†Ô∏è **COMPLETE PROJECT MANAGEMENT**

### üé® **New Visual CLI Interface**

#### üêß **Linux/macOS**
```bash
./neodoo                  # Interactive menu with visual interface (recommended!)
```

#### ü™ü **Windows**
```batch
# Command Prompt/PowerShell
neodoo.bat                # Interactive menu with visual interface

# PowerShell
.\neodoo.ps1              # Interactive menu with visual interface

# Direct Python (fallback)
python framework\cli\neodoo.py    # Interactive menu
```

**Menu Options:**
- üöÄ **Create new project** - Interactive wizard with template selection
- üìã **List projects** - Visual project overview with details  
- ‚ñ∂Ô∏è **Run project** - Start Odoo with real-time status info
- üóëÔ∏è **Delete project** - Safe project removal with confirmation
- üîß **Environment check** - System health verification
- üîÑ **Update project** - Update Odoo source and dependencies
- ‚ùì **Help** - Detailed usage information

### Direct Commands (Alternative)

#### üêß **Linux/macOS**
```bash
./neodoo create           # Create new complete project (wizard)
./neodoo list             # List all projects
./neodoo run              # Run project with visual feedback
./neodoo delete           # Delete a project safely
./neodoo doctor           # Check environment health
./neodoo update           # Update project components
./neodoo migrate path/to/module --from-version 17  # Migration assistant report
```

#### ü™ü **Windows**
```batch
# Command Prompt/PowerShell
neodoo.bat create         # Create new complete project (wizard)
neodoo.bat list           # List all projects
neodoo.bat run            # Run project with visual feedback
neodoo.bat delete         # Delete a project safely
neodoo.bat doctor         # Check environment health
neodoo.bat update         # Update project components
neodoo.bat migrate path\to\module --from-version 17  # Migration assistant report

# PowerShell (alternative)
.\neodoo.ps1 create       # Create new complete project (wizard)
.\neodoo.ps1 list         # List all projects
```

## üß™ Try it

Jump straight to the language guide and follow the CLI-first flow:

- üá∫üá∏ English: ./docs/guides/en/COMPLETE_GUIDE.md
- üáßüá∑ Portugu√™s: ./docs/guides/pt/GUIA_COMPLETO.md
- üá™üá∏ Espa√±ol: ./docs/guides/es/GUIA_COMPLETA.md

Minimal .neodoo.yml example for reproducible project creation:

```yaml
# .neodoo.yml
version: 1
name: my_odoo18_project
base_dir: ~/odoo_projects
module: my_module
template: minimal
venv: true
odoo_branch: 18.0
```

Then run:

```bash
./neodoo create --from-config ./docs/.neodoo.yml
```

### Visual Project Management
```bash
# Interactive menu (recommended)
./neodoo                           # Beautiful visual menu interface

# Direct commands with enhanced visual feedback
./neodoo list                      # Enhanced project list with colors
./neodoo delete                    # Safe deletion with confirmation dialog
./neodoo run                       # Run with detailed startup information
./neodoo run --path /my/project    # Run specific project with status
./neodoo doctor                    # Environment check with visual results
./neodoo doctor --path /my/project # Project-specific health check
./neodoo update --path /my/project # Update with progress indicators
./neodoo migrate /my/module --from-version 17 # Migration assistant report
```

**Enhanced Features:**
- üé® **Colorful output** with emoji indicators
- üìä **Progress indicators** for long operations  
- üõ°Ô∏è **Safe confirmations** for destructive actions
- üì± **Responsive interface** adapts to terminal size
- üéØ **Smart port detection** automatically finds available ports
- Estrutura personalizada

## üß† **Projetado para LLMs e Desenvolvedores**

Este framework elimina confus√£o e imp√µe os padr√µes mais modernos do Odoo 18+:

- **Sistema SOIL**: Orienta√ß√£o integrada para LLMs
- **Validadores Inteligentes**: Verifica√ß√£o e corre√ß√£o autom√°tica
- **Corporate Plugins**: Sistema extens√≠vel de valida√ß√µes customizadas para regras espec√≠ficas de cada empresa
- **Templates Testados**: Estruturas prontas para diversos casos de uso
- **Configura√ß√£o Zero**: Projeto funcionando em minutos
- **VSCode Agent Workspace**: Tasks, launchers e extens√µes recomendadas para cada papel definido no framework
- **Plataforma de Plugins de Valida√ß√£o**: Arquitetura extens√≠vel para checks internos e de comunidade
- **Assistente de Migra√ß√£o**: Scanner interativo para migrar c√≥digo 15/16/17 ‚Üí 18 com relat√≥rio em JSON

## üîå **Corporate Plugins - Valida√ß√µes Customizadas**

O framework suporta plugins de valida√ß√£o corporativa para impor regras espec√≠ficas da sua empresa:

### **Como Usar**

```bash
# Valida√ß√£o com plugin corporativo
python framework/validator/validate.py your_module \
    --plugins-dir corporate_plugins \
    --strict

# Ou via vari√°vel de ambiente
export NEODOO_VALIDATOR_PLUGINS=/path/to/corporate_plugins
python framework/validator/validate.py your_module
```

> **‚ö†Ô∏è Nota Importante:** O validador carrega **TODOS** os arquivos `.py` do diret√≥rio especificado. Para aplicar apenas plugins espec√≠ficos, organize-os em subdiret√≥rios separados.

### **Plugins Inclu√≠dos**

- **`acme_corporate_rules.py`** - Exemplo completo de regras corporativas (prefixos, nomenclatura, seguran√ßa)
- **`neo_sempre_rules.py`** - Valida√ß√µes espec√≠ficas para dom√≠nio INSS de benefici√°rios

### **Isolar Plugins por Projeto**

```bash
# Op√ß√£o 1: Diret√≥rios dedicados por empresa/projeto
mkdir -p corporate_plugins/acme corporate_plugins/neo_sempre
python framework/validator/validate.py my_module --plugins-dir corporate_plugins/neo_sempre

# Op√ß√£o 2: Desabilitar plugins renomeando com underscore
mv corporate_plugins/acme_corporate_rules.py corporate_plugins/_acme_corporate_rules.py.disabled
```

**üìñ [Guia Completo de Plugins](./docs/guides/en/VALIDATOR_PLUGINS.md)** - Documenta√ß√£o detalhada sobre isolamento, carregamento e boas pr√°ticas

### **Criar Seu Pr√≥prio Plugin**

```python
# corporate_plugins/my_company_rules.py
from framework.validator.plugin import BaseValidatorPlugin, ValidationResult

class MyCompanyPlugin(BaseValidatorPlugin):
    name = "my_company_rules"
    description = "Regras espec√≠ficas da minha empresa"
    
    def supports(self, file_path: Path, context: ValidationContext) -> bool:
        return file_path.suffix in {'.py', '.xml'}
    
    def validate_file(self, file_path: Path, context: ValidationContext):
        results = []
        # Suas valida√ß√µes customizadas aqui
        return results

def register():
    return [MyCompanyPlugin()]
```

**Benef√≠cios:**
- ‚úÖ Imp√µe padr√µes corporativos automaticamente
- ‚úÖ Detecta problemas espec√≠ficos do seu dom√≠nio
- ‚úÖ Reutiliz√°vel entre projetos
- ‚úÖ N√£o modifica c√≥digo existente (apenas valida)

Veja [IMPACT_ANALYSIS.md](docs/IMPACT_ANALYSIS.md) para exemplos de uso e benef√≠cios.

## üì¶ **Componentes Principais**

- `framework/` - Ferramentas essenciais e padr√µes
  - `validator/` - Ferramentas de valida√ß√£o Odoo 18+
  - `generator/` - Ferramentas de gera√ß√£o de projetos
  - `standards/` - Padr√µes de conformidade (inclui SOIL)
  - `roles/` - Defini√ß√µes de pap√©is para LLMs
- `templates/` - Modelos de projetos por tipo
- `examples/` - Implementa√ß√µes de refer√™ncia
- `docs/` - Documenta√ß√£o multil√≠ngue
```

### Start Developing
```bash
# After project creation, start Odoo
cd ~/odoo_projects/your_project
./run.sh

# Automatically opens browser at http://localhost:8069
# Database is pre-configured
# OCA web_responsive module is auto-installed
```

## üéØ **What is Neodoo18Framework?**

A comprehensive development framework that creates **complete Odoo 18+ environments**, not just modules:

- **Complete Environment**: Full Odoo source + OCA modules + virtual environment
- **SOIL System**: LLM guidance for consistent Odoo 18+ development
- **Smart Validators**: Automatic compliance checking (no more `<tree>` vs `<list>` errors!)
- **Project Lifecycle**: Create, manage, and delete complete projects
- **Zero-Config Setup**: Working Odoo instance in under 5 minutes

## üèóÔ∏è **Environment Architecture**

```
Framework creates isolated, complete environments:

~/odoo_projects/
‚îú‚îÄ‚îÄ project_a/           # Complete Odoo environment
‚îÇ   ‚îú‚îÄ‚îÄ odoo_source/     # Odoo 18+ source code
‚îÇ   ‚îú‚îÄ‚îÄ custom_addons/   # Your modules
‚îÇ   ‚îú‚îÄ‚îÄ community_addons/ # OCA modules
‚îÇ   ‚îú‚îÄ‚îÄ .venv/          # Isolated Python environment
‚îÇ   ‚îî‚îÄ‚îÄ run.sh          # One-click startup
‚îú‚îÄ‚îÄ project_b/           # Another complete environment
‚îî‚îÄ‚îÄ project_c/           # Yet another environment
```

## üß† **For LLMs & AI Assistants**

This framework is specifically designed for AI assistants to understand and follow Odoo 18+ standards:

**Entry Point**: Always start with `framework/llm-guidance/SOIL_CORE.md`
- Contains mandatory patterns and enforcement rules
- Eliminates common Odoo 18+ migration errors
- Provides clear guidance for code generation

## ÔøΩÔ∏è **Development Tools**

```bash
# Complete project management (recommended)
./neodoo create        # Create new complete project (wizard)
./neodoo list          # List all projects
./neodoo delete        # Delete project + database

# Legacy tools
./quick-start.sh       # Create project with defaults
./setup.sh help        # Show legacy help and options

# Framework tools
./env.sh setup         # Setup framework environment
python framework/validator/validate.py path/  # Validate Odoo 18+ compliance
# Use strict mode to enforce stricter rules (promote key warnings to errors)
python framework/validator/validate.py path/ --strict

# Generator flags
python framework/generator/create_project.py --name my_module --type minimal --dry-run  # preview
python framework/generator/create_project.py --name my_module --type minimal --no-all-placeholders  # conservative replacement
```

## ‚úÖ QA / Status

- CLI help, doctor, list, create, and update verified on macOS.
- GitHub Actions CI runs `neodoo doctor --no-input` and the strict validator on every push/pull request.
- Generator lists templates and creates modules from the minimal template that pass the validator in strict mode.
- Filenames with placeholders are auto-renamed during generation (e.g., views/{{MODULE_TECHNICAL_NAME}}_views.xml ‚Üí views/<module>_views.xml).

Re-run the quick checks locally:

```bash
# 1) List templates
python3 framework/generator/create_project.py --name tmp --list-templates

# 2) Create a temp project without venv for speed
./neodoo create --name sanity_proj --base-dir /tmp/neodoo_sanity --module sanity_mod --template minimal --no-venv

# 3) Run doctor and validator (strict)
./neodoo doctor --path /tmp/neodoo_sanity/sanity_proj --no-input  # drop --no-input for interactive mode
python3 framework/validator/validate.py /tmp/neodoo_sanity/sanity_proj/custom_addons/sanity_mod --strict --auto-fix
```

## üì¶ **Deploy Instructions**
See our [Deployment Guide](./DEPLOYMENT.md) for production deployment of created projects.

## ü§ù Community

- **License**: LGPL-3 (following Odoo licensing)
- **Contributions**: Welcome! See [CONTRIBUTING.md](CONTRIBUTING.md)
- **Issues**: Use GitHub Issues for bugs and feature requests

## üí° Why Use Neodoo18Framework?

- **Developers**: Set up Odoo environments in minutes, not hours
- **Companies**: Ensure consistency across projects and teams
- **LLMs**: Get clear guidance for Odoo 18+ development

## üõ°Ô∏è Strict Standards

- Odoo 18+ compliance (no legacy patterns)
- Modern Python practices
- LLM-friendly structure
- Enterprise-grade security standards

## ü§ù Community

- **License**: MIT (maximum freedom for developers)
- **Contributions**: Welcome! See CONTRIBUTING.md
- **Issues**: Use GitHub Issues for bugs and feature requests

---

**Built with real experience. Tested in production.**
